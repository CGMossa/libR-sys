name: Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  test_linux:
    name: Run tests (Linux)
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust-version: [stable, beta, nightly]

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
      - name: Build
        id: build
        run: cargo build -vv --features use-bindgen
        env:
          LIBRSYS_BINDINGS_OUTPUT_PATH: generated_bindings
      - name: Run tests
        run: cargo test -vv --features use-bindgen -- --nocapture --test-threads=1
      - name: Upload generated bindings
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@main
        with:
          name: Linux ${{ matrix.rust-version }} generated bindings
          path: generated_bindings
      - name: Run tests on precomputed bindings shipped with libR-sys
        run: cargo test -vv -- --nocapture --test-threads=1


  test_macos:
    name: Run tests (macOS)
    runs-on: macos-latest
    strategy:
      matrix:
        rust-version: [stable]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
      - name: Install dependencies
        run: brew install llvm r
      - name: Set dynamic environment variables
        run: echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
      - name: Build
        id: build
        run: cargo build -vv --features use-bindgen
        env:
          LIBRSYS_BINDINGS_OUTPUT_PATH: generated_bindings
      - name: Run tests
        run: cargo test -vv --features use-bindgen -- --nocapture --test-threads=1
      - name: Upload generated bindings shipped with libR-sys
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@main
        with:
          name: macOS generated bindings
          path: generated_bindings
      - name: Run tests on precomputed bindings
        run: cargo test -vv -- --nocapture --test-threads=1

  test_windows:
    name: Run tests (Windows x86_64)
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        rust-version: [stable-x86_64-pc-windows-gnu]
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          path-type: inherit
          release: false
          update: false
      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: 'release'
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          target: i686-pc-windows-gnu
          default: true
          components: rustfmt, clippy
      - name: Build
        id: build
        run: |
          cargo build -vv --features use-bindgen 
        env:
          LIBCLANG_PATH: C:/msys64/mingw64/bin
          LIBRSYS_BINDINGS_OUTPUT_PATH: generated_bindings
      - name: Build i686
        id: build_i686
        run: |
          cargo build -vv --features use-bindgen --target i686-pc-windows-gnu
        env:
          LIBCLANG_PATH: C:/msys64/mingw64/bin
          LIBRSYS_BINDINGS_OUTPUT_PATH: generated_bindings_i686
          LIBRSYS_LIBCLANG_INCLUDE_PATH: C:/msys64/mingw32/i686-w64-mingw32/include/
      - name: Run tests
        run: cargo test --features use-bindgen -- --nocapture --test-threads=1
      - name: Upload generated bindings
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@main
        with:
          name: Windows generated bindings
          path: generated_bindings
      - name: Upload generated i686 bindings
        if: steps.build_i686.outcome == 'success'
        uses: actions/upload-artifact@main
        with:
          name: Windows generated i686 bindings
          path: generated_bindings_i686
      - name: Run tests on precomputed bindings shipped with libR-sys
        run: cargo test -- --nocapture --test-threads=1

## Windows 32bit is disabled as it doesn't currently work
#  test_windows_32bit:
#    name: Run tests (Windows i686)
#    runs-on: windows-latest
#    defaults:
#      run:
#        shell: msys2 {0}
#    strategy:
#      matrix:
#        rust-version: [stable-i686-pc-windows-gnu]
#    steps:
#      - uses: actions/checkout@v2
#      - uses: msys2/setup-msys2@v2
#        with:
#          msystem: MINGW32
#          path-type: inherit
#          release: false
#          update: false
#      - uses: r-lib/actions/setup-r@v1
#        with:
#          r-version: 'release'
#      - uses: actions-rs/toolchain@v1
#        with:
#          toolchain: ${{ matrix.rust-version }}
#          default: true
#          components: rustfmt, clippy
#      - name: Build with precomputed bindings
#        run: cargo build -vv
#      - name: Run tests on precomputed bindings
#        run: cargo test -vv -- --nocapture --test-threads=1

